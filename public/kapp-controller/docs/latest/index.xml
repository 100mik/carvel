<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About kapp-controller on Carvel</title>
    <link>/kapp-controller/docs/latest/</link>
    <description>Recent content in About kapp-controller on Carvel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/kapp-controller/docs/latest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>/kapp-controller/docs/latest/install-alpha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/install-alpha/</guid>
      <description>Install alpha release of kapp-controller ¶The alpha release of kapp-controller contains the packaging APIs, which are undergoing active development. The alpha release should only be used for experimenting with the packaging APIs as there will be possible breaking changes as further feedback is collected.
To install with kapp:
$ kapp deploy -a kc -f https://raw.githubusercontent.com/vmware-tanzu/carvel-kapp-controller/dev-packaging/alpha-releases/v0.18.0-alpha.5.yml To install with kubectl:
$ kubectl apply -f https://raw.githubusercontent.com/vmware-tanzu/carvel-kapp-controller/dev-packaging/alpha-releases/v0.18.0-alpha.5.yml </description>
    </item>
    
    <item>
      <title>App Config</title>
      <link>/kapp-controller/docs/latest/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/config/</guid>
      <description>Example ¶See App Spec for details.
apiVersion:kappctrl.k14s.io/v1alpha1kind:Appmetadata:name:simple-appspec:serviceAccountName:defaultfetch:- git:url:https://github.com/k14s/k8s-simple-app-exampleref:origin/developsubPath:config-step-2-templatetemplate:- ytt:{}deploy:- kapp:{}spec.fetch ¶Fetches set of files from various sources. Multiple sources can be used (for example, helmChart and inline).
 inline: specify one or more files within resource imgpkgBundle: download imgpkg bundle from registry (available in v0.17.0+) image: download Docker image from registry http: download file at URL git: clone Git repository helmChart: fetch Helm chart from Helm repository  Pull helm chart via helm fetch</description>
    </item>
    
    <item>
      <title>App spec</title>
      <link>/kapp-controller/docs/latest/app-spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/app-spec/</guid>
      <description>apiVersion:kappctrl.k14s.io/v1alpha1kind:Appmetadata:name:simple-app# namespace is going to be used as a default namespace during kapp deploynamespace:nsspec:# pauses _future_ reconcilation; does _not_ affect# currently running reconciliation (optional; default=false)paused:true# cancels current and future reconciliations (optional; default=false)canceled:true# Deletion requests for the App will result in the App CR being# deleted, but its associated resources will not be deleted # (optional; default=false; v0.18.0+)noopDelete:true# specifies that app should be deployed authenticated via# given service account, found in this namespace (optional; v0.</description>
    </item>
    
    <item>
      <title>Configuring the Controller</title>
      <link>/kapp-controller/docs/latest/controller-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/controller-config/</guid>
      <description>(available in v0.14.0+)
Kapp controller exposes the ability to configure the controller via a config map which kapp controller will look for and apply as part of the startup processes
ConfigMap Spec ¶apiVersion:v1kind:ConfigMapmetadata:# Name must be `kapp-controller-config` for kapp controller to pick it upname:kapp-controller-config# Namespace must match the namespace kapp-controller is deployed tonamespace:kapp-controllerdata:# A cert chain of trusted ca certs. These will be added to the system-wide# cert pool of trusted ca&amp;#39;s (optional)caCerts:|-----BEGIN CERTIFICATE----- MIIEXTCCAsWgAwIBAgIQDqAvoGhrmyB/EvhjT/efWzANBgkqhkiG9w0BAQsFADA4 MQwwCgYDVQQGEwNVU0ExFjAUBgNVBAoTDUNsb3VkIEZvdW5kcnkxEDAOBgNVBAMT B2Jvc2gtY2EwHhcNMjAxMjIzMTY1OTAxWhcNMjExMjIzMTY1OTAxWjA4MQwwCgYD VQQGEwNVU0ExFjAUBgNVBAoTDUNsb3VkIEZvdW5kcnkxEDAOBgNVBAMTB2Jvc2gt Y2EwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCsMTj5yHLez8jzONu1 tv+u0dqzt8UdWCtUtHCDkIiNJIcB3PkGG7x/LvZ0bMydWeFcBq0g15tfG6N6vHnF 4p2E9nSe0XjEEnxEkmtdpoFVPZdHTBgc6H5LOMshPH1ARWpuvBnDb87oVinIZBaf 7BjhUQcRoGtsomk/R9Ke9FB4rMZUfuY/7CC8lDyP5Y02VeTAUimK6/WfDh3VPB3e vQfXKJY0Ba5s43fIdudV+fcuKDut01oKmiBL6IHLRSrZKta5mg4fgimst6nJ4xvU SWqYWS4yMxf6pOrTHPjbKUqXqbK4Reh+oQoE12WJZ3NvXr1GoDzt1xzTNzUpUVws nQm5Fo9H07mkjKeu8gOrOBQ2FqaK+eZ5FFNV7kToVQj2KVTEbLLcTrF454jhsoSd EOlqVUjtfxGz0dGEuy+IgMvSSjtky7eI08jdBWMiOThQvR3n0Q6TXF/wBwCEfgDa 4eVeziaUGPXUsefR2+2ZCQ6Z31SmtUGECciCKmKtZTekKCUCAwEAAaNjMGEwDgYD VR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFDwRpmIKYZvr lKqROus2Ae6gSKkDMB8GA1UdIwQYMBaAFDwRpmIKYZvrlKqROus2Ae6gSKkDMA0G CSqGSIb3DQEBCwUAA4IBgQA/LX15Qb7v/og06XB27TPl9StGBiewrb0WdHEz9H16 eN926TwxWKUr6QcbGg6UbNfLUfMC3VicCDMTQCSNhBTUXm+4pKcJsTyM9/Sk/e4U 5+l3FTgxXs+3mEoYJy16QlkU1XDr1q6Myo9Kc38d1yUW9OPxBV4Ur3+12uk5ElSC jZu7l+ox2FLds1TmYBhRR/2Jdbm5aoamh4FVpkmDgGedjERREymvnOIMkhWyUfWE L8Sxa2d8427cBieiEP4foLgjWKr2+diCDrBymU/pz/ZMRRpvUc2uFV005/vmDedK xQACQ8ZWBYWzNCV4C0Y5AS1PETxbocZ09Yw6K1XyVveEp8aQ/ROMkAUOObhMD45W GZNwewGU/V7kclDgMwq6R1VXr5R7NtK9V96vi6ZaujoJKvF1PFpZ/IHWcfFkpVoy Fu8L5PIkg4weBW+87kp+CCseEXPUplpqQCAnmVJdvilK6vgKc7T+vzbET8LNw7NX mHOVA3CR2w+yUhN4uiCI1aY= -----END CERTIFICATE-----# The url/ip of a proxy for kapp controller to use when making network# requests (optional)httpProxy:proxy-svc.</description>
    </item>
    
    <item>
      <title>Dangerous Flags</title>
      <link>/kapp-controller/docs/latest/dangerous-flags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/dangerous-flags/</guid>
      <description>There are several flags available for kapp-controller binary that are strongly discouraged in a production setting.
--dangerous-enable-pprof=true ¶This flag enables Go&amp;rsquo;s pprof server within kapp-controller process. It runs on 0.0.0.0:6060. It allows to inspect running Go process in various ways, for example:
 list goroutines: http://x.x.x.x/debug/pprof/goroutine?debug=2 collect CPU samples: go tool pprof x.x.x.x/debug/pprof/profile?seconds=60 (useful commands: top10, tree)  </description>
    </item>
    
    <item>
      <title>Development &amp; Deploy</title>
      <link>/kapp-controller/docs/latest/dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/dev/</guid>
      <description>Install ytt, kbld, kapp beforehand (https://carvel.dev).
./hack/build.sh # to build locally # add `-v image_repo=docker.io/username/kapp-controller` with your registry to ytt invocation inside ./hack/deploy.sh # to deploy export KAPPCTRL_E2E_NAMESPACE=kappctrl-test ./hack/test-all.sh Release ¶# Bump version in cmd/controller/main.go # Commit ./hack/build-release.sh </description>
    </item>
    
    <item>
      <title>Install</title>
      <link>/kapp-controller/docs/latest/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/install/</guid>
      <description>Grab the latest copy of YAML from the Releases page and use your favorite deployment tool (such as kapp or kubectl) to install it.
Example:
$ kapp deploy -a kc -f https://github.com/vmware-tanzu/carvel-kapp-controller/releases/latest/download/release.yml or
$ kubectl apply -f https://github.com/vmware-tanzu/carvel-kapp-controller/releases/latest/download/release.yml </description>
    </item>
    
    <item>
      <title>Kapp Controller Startup</title>
      <link>/kapp-controller/docs/latest/startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/startup/</guid>
      <description>(v0.14.0+)
The startup of kapp controller consists of two processes: controllerinit and controller.
The controllerinit Process ¶This is the main process for the kapp controller binary. Since the binary is the entrypoint for the docker image, kapp controller will be PID 1 and is therefore responsible for reaping any zombie processes, so the process begins by starting a thread to reap any zombies that appear. More on PID 1 and zombie processes can be found here.</description>
    </item>
    
    <item>
      <title>Package Authoring</title>
      <link>/kapp-controller/docs/latest/package-authoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/package-authoring/</guid>
      <description>Available in v0.17.0-alpha.1+
Before jumping in, we recommend reading through the docs about the new packaging APIs to familiarize yourself with the YAML configuration used in these workflows.
This workflow walks through an example that will help a user transform a stack of plain Kubernetes manifests in to a Package within a PackageRepository. This will allow them to distribute their apps in a way that is easily installable by any consumers running a kapp-controller in their cluster.</description>
    </item>
    
    <item>
      <title>Package Consumption</title>
      <link>/kapp-controller/docs/latest/package-consumption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/package-consumption/</guid>
      <description>Available in v0.17.0-alpha.1+
Before jumping in, we recommend reading through the docs about the new packaging apis to familiarize yourself with the YAML configuration used in these workflows.
This workflow walks through the example contained in the packaging-demo.
Prerequisites ¶ You will need to install the alpha release on a Kubernetes cluster to go through the examples. The instructions below assume kapp and kubectl are installed.  Adding package repository ¶kapp-controller needs to know which packages are available to install.</description>
    </item>
    
    <item>
      <title>Packaging</title>
      <link>/kapp-controller/docs/latest/packaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/packaging/</guid>
      <description>Available in v0.17.0-alpha.1+
Disclaimer: These APIs are still very much in an alpha stage, so changes will almost certainly be made and no backwards compatibility is guaranteed between alpha versions.
The new alpha release of kapp-controller adds new APIs to bring common package management workflows to a Kubernetes cluster. This is done using three new CRs: PackageRepository, Package, and InstalledPackage, which are described further in their respective sections. As this is still an alpha feature, we would love any and all feedback regarding these APIs or any documentation relating to them!</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/kapp-controller/docs/latest/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/security/</guid>
      <description>Vulnerability Disclosure ¶If you believe you have found a security issue in kapp-controller, please privately and responsibly disclose it by following the directions in our security policy.</description>
    </item>
    
    <item>
      <title>Security Model</title>
      <link>/kapp-controller/docs/latest/security-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/security-model/</guid>
      <description>App CR privileges ¶kapp-controller container runs with a service account (named kapp-controller-sa inside kapp-controller namespace) that has access to all service accounts and secrets in the cluster. This service account is not used for deployment of app resources.
Each App CR must specify either a
 service account (via spec.serviceAccountName) or, Secret with kubeconfig contents for some cluster (via spec.cluster.kubeconfigSecretRef.name)  forcing App CR owner to explicitly provide needed privileges for management of app resources.</description>
    </item>
    
    <item>
      <title>Sops</title>
      <link>/kapp-controller/docs/latest/sops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/sops/</guid>
      <description>Available in v0.11.0+.
Storing encrypted secrets next to your configuration (within a Git repo or other artifacts) is one way to manage secret lifecycle. kapp-controller integrates with Mozilla&amp;rsquo;s SOPS to decrypt secret material in fetched configuration.
Prepate GPG installation ¶$ gpg --gen-key ... $ gpg --list-secret-keys --keyid-format LONG /root/.gnupg/secring.gpg ------------------------ sec 4096R/B464DFD255C6B9F8 2020-10-03 uid test test (test) &amp;lt;test@test.com&amp;gt; ssb 4096R/FEE37B8E2098EDFC 2020-10-03 (Note: B464DFD255C6B9F8 is the ID to be used later)</description>
    </item>
    
    <item>
      <title>Walkthrough</title>
      <link>/kapp-controller/docs/latest/walkthrough/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/walkthrough/</guid>
      <description>The goal of this walkthrough is to demonstrate how to install a simple example application, an HTTP server, on Kubernetes with kapp-controller. We will use examples/simple-app-git directory as our YAML configuration.
You can use kubectl (or another tool) to deploy the YAML examples below. We&amp;rsquo;ve chosen kapp.
  Start by installing kapp-controller onto your cluster
  Install examples/default-ns-rbac.yml. It creates default-ns-sa service account that allows to change any resource within the default namespace.</description>
    </item>
    
  </channel>
</rss>

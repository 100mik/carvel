<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About kbld on Carvel</title>
    <link>/kbld/docs/latest/</link>
    <description>Recent content in About kbld on Carvel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/kbld/docs/latest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Authentication</title>
      <link>/kbld/docs/latest/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/auth/</guid>
      <description>Via Docker config ¶Even though kbld commands use registry APIs directly, by default it uses credentials stored in ~/.docker/config.json which are typically generated via docker login command.
Example generated ~/.docker/config.json:
{ &amp;#34;auths&amp;#34;: { &amp;#34;https://index.docker.io/v1/&amp;#34;: { &amp;#34;auth&amp;#34;: &amp;#34;dXNlcjpwYXNzd29yZA==&amp;#34; }, }, &amp;#34;HttpHeaders&amp;#34;: { &amp;#34;User-Agent&amp;#34;: &amp;#34;Docker-Client/18.09.6 (darwin)&amp;#34; } } where dXNlcjpwYXNzd29yZA== is base64(&amp;quot;username:password&amp;quot;).
Via Environment Variables ¶As of v0.23.0+, kbld can also use following environment variables:
 KBLD_REGISTRY_HOSTNAME to specify registry hostname (e.g. gcr.</description>
    </item>
    
    <item>
      <title>Building images</title>
      <link>/kbld/docs/latest/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/building/</guid>
      <description>Building images from source ¶kbld can be used to orchestrate build tools such as Docker and pack to build images from source and record resulting image reference in a YAML file. This is especially convenient during local development when working with one or more changing applications.
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:simple-app#! &amp;lt;-- unresolved image ref---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test2spec:selector:matchLabels:app:kbld-test2template:metadata:labels:app:kbld-test2spec:containers:- name:my-appimage:another-simple-app#! &amp;lt;-- unresolved image ref---apiVersion:kbld.k14s.io/v1alpha1kind:Configsources:- image:simple-apppath:src/simple-app- image:another-simple-apppath:src/another-simple-app(See Configuration for more details about Sources.)
Running above example via kbld -f file.</description>
    </item>
    
    <item>
      <title>CNAB Image Maps</title>
      <link>/kbld/docs/latest/cnab-image-relocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/cnab-image-relocation/</guid>
      <description>CNAB spec mentions Image Relocation as part of bundle runtime.
kbld supports applying relocation-mapping.json on top of YAML configuration via kbld --image-map-file /cnab/app/relocation-mapping.json .... For example:
/cnab/app/relocation-mapping.json:
{ &amp;#34;gabrtv/microservice@sha256:cca460afa270d4c527981ef9ca4989346c56cf9b20217dcea37df1ece8120687&amp;#34;: &amp;#34;my.registry/microservice@sha256:cca460afa270d4c527981ef9ca4989346c56cf9b20217dcea37df1ece8120687&amp;#34;, &amp;#34;technosophos/helloworld:0.1.0&amp;#34;: &amp;#34;my.registry/helloworld:0.1.0&amp;#34; } and kbld input:
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:gabrtv/microservice@sha256:cca460afa270d4c527981ef9ca4989346c56cf9b20217dcea37df1ece8120687- name:my-app2image:technosophos/helloworld:0.1.0would result in:
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:my.registry/microservice@sha256:cca460afa270d4c527981ef9ca4989346c56cf9b20217dcea37df1ece8120687- name:my-app2image:my.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/kbld/docs/latest/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/config/</guid>
      <description>Overview ¶You can configure kbld by adding configuration resources (they follow Kubernetes resource format, but are removed from kbld output). Configuration resources may be specified multiple times.
Schema ¶---apiVersion:kbld.k14s.io/v1alpha1kind:ConfigminimumRequiredVersion:0.15.0sources:- image:adservicepath:src/destinations:- image:adservicenewImage:docker.io/dkalinin/microservices-demo-adservicesearchRules:- keyMatcher:name:sidecarImage- valueMatcher:image:exact-imageimageRepo:gcr.io/some/repooverrides:- image:nginxnewImage:docker.io/library/nginx:1.14.2 minimumRequiredVersion (optional) specify minimume required version of kbld needed to work with this configuration sources (optional; array) allows to specify how to build certain images. See details in sections below.  image (required; string) image matcher path (required; string) path to source location docker (optional; default) use Docker to build source.</description>
    </item>
    
    <item>
      <title>Packaging and Relocation</title>
      <link>/kbld/docs/latest/packaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/packaging/</guid>
      <description>Deprecation ¶This functionality was deprecated in kbld starting from version v0.30.0 and will be removed soon. These features are now available on imgpkg.
Overview ¶kbld provides a way to relocate (i.e. copy) images between multiple registries. Two approaches are available:
 kbld relocate (available v0.23.0+) allows to efficiently copy images between registries as long as running relocate command has connectivity to both registries. kbld package and kbld unpackage allows to export images into a single tarball, and later import them from given tarball into a different (or same) registry.</description>
    </item>
    
    <item>
      <title>Resolving images</title>
      <link>/kbld/docs/latest/resolving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/resolving/</guid>
      <description>Resolving image references to digests ¶kbld looks for image keys within YAML documents and tries to resolve image reference to its full digest form.
For example, following
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:nginx:1.14.2#! ^-- image reference in its tag formwill be transformed to
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:index.docker.io/library/nginx@sha256:f7988fb6c02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d#! ^-- resolved image reference to its digest formvia
kbld -f file.yml Few other variations
pbpaste | kbld -f- kbld -f . kbld -f file.yml -f config2.yml Generating resolution imgpkg lock output ¶Available in 0.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/kbld/docs/latest/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/security/</guid>
      <description>Vulnerability Disclosure ¶If you believe you have found a security issue in kbld, please privately and responsibly disclose it by following the directions in our security policy.</description>
    </item>
    
  </channel>
</rss>

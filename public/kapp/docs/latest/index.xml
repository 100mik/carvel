<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About kapp on Carvel</title>
    <link>/kapp/docs/latest/</link>
    <description>Recent content in About kapp on Carvel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/kapp/docs/latest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>/kapp/docs/latest/hpa-deployment-rebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/hpa-deployment-rebase/</guid>
      <description>HPA and Deployment rebase ¶Here is an example on how to use custom rebaseRules to &amp;ldquo;prefer&amp;rdquo; server chosen value for spec.replicas field for a particular Deployment.
apiVersion:kapp.k14s.io/v1alpha1kind:ConfigrebaseRules:- path:[spec, replicas]type:copysources:[existing, new]resourceMatchers:- kindNamespaceNameMatcher:kind:Deploymentnamespace:my-nsname:my-app---apiVersion:autoscaling/v1kind:HorizontalPodAutoscalermetadata:name:my-appnamespace:my-ns.</description>
    </item>
    
    <item>
      <title></title>
      <link>/kapp/docs/latest/rebase-pvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/rebase-pvc/</guid>
      <description>PersistentVolumeClaim rebase ¶Here is an example on how to use custom rebaseRules to &amp;ldquo;prefer&amp;rdquo; server chosen value for several annotations added by PVC controller (in other words, cluster owned fields), instead of removing them based on given configuration.
Let&amp;rsquo;s deploy via kapp deploy -a test -f config.yml -c with following configuration config.yml:
apiVersion:v1kind:PersistentVolumeClaimmetadata:name:mysqlclaimspec:accessModes:- ReadWriteOnceresources:requests:storage:5GiWithout additional rebase rules following diff will be presented upon next deploy, stating that several annotations will be removed (since they were not present in the initial configuration):</description>
    </item>
    
    <item>
      <title>Applications</title>
      <link>/kapp/docs/latest/apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/apps/</guid>
      <description>Overview ¶kapp considers a set of resources with the same label as an application. These resources could span any number of namespaces or could be cluster-wide (e.g. CRDs).
kapp has two methods of finding resources:
 via unique-to-Namespace application name (via -a my-name flag), or via user provided label (via -a label:my-label=val flag)  First approach is most common as kapp generates a unique label for each tracked application and associates that with an application name.</description>
    </item>
    
    <item>
      <title>Apply Ordering</title>
      <link>/kapp/docs/latest/apply-ordering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/apply-ordering/</guid>
      <description>Overview ¶kapp includes builtin rules to make sure certain changes are applied in particular order:
 Creates/updates  CRDs are created/updated before custom resources Namespaces are created/updated before namespaced resources Pod related resources (ServiceAccount, ConfigMap, Secret, etc.) are created/updated before other resources (v0.25.0+) RBAC related resources (Role, RoleBinding, etc.) are created/updated before other resources (v0.25.0+)   Deletions (below is order as of v0.29.0+)  Custom resources are deleted first CRDs are deleted next Rest of resoures are deleted    As of v0.</description>
    </item>
    
    <item>
      <title>Apply stage</title>
      <link>/kapp/docs/latest/apply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/apply/</guid>
      <description>Overview ¶Once change set is calculated (see Diff section for details), kapp asks for user confirmation (unless --yes flag is specified) to proceed with changes.
Changes are applied in particular order as described in Apply ordering.
All created resources are labeled with several labels:
 kapp.k14s.io/app to track which application &amp;ldquo;owns&amp;rdquo; resource kapp.k14s.io/identity to identify preferred API version used when creating resource kapp.k14s.io/association to track (best effort) parent-child relationships between resources  Every time application is deployed, new application change record is saved.</description>
    </item>
    
    <item>
      <title>Apply Waiting</title>
      <link>/kapp/docs/latest/apply-waiting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/apply-waiting/</guid>
      <description>Overview ¶kapp includes builtin rules on how to wait for the following resource types:
 any resource with metadata.deletionTimestamp: wait for resource to be fully removed any resource matching Config&amp;rsquo;s waitRules: see &amp;ldquo;Custom waiting behaviour&amp;rdquo; below apiextensions.k8s.io/&amp;lt;any&amp;gt;/CustomResourceDefinition: wait for Established and NamesAccepted conditions to be True (note that this is wait rule for CustomResourceDefinition resource itself, not CRs) apps/v1/DaemonSet: wait for status.numberUnavailable to be 0 apps/v1/Deployment: see &amp;ldquo;apps/v1/Deployment resource&amp;rdquo; below apps/v1/ReplicaSet: wait for status.</description>
    </item>
    
    <item>
      <title>Cheatsheet</title>
      <link>/kapp/docs/latest/cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/cheatsheet/</guid>
      <description>List ¶kapp ls -A List all app in the cluster (across all namespaces)
Deploy ¶Deploy app named app1 with configuration from config/:
kapp deploy -a app1 -f config/ -c Deploy app named app1 with configuration piped in (see alternative that does not require --yes next):
ytt -f config/ | kapp deploy -a app1 -f- -c -y Deploy app named app1 with configuration generated inline and with confirmation dialog:
kapp deploy -a app1 -f &amp;lt;(ytt -f config/ ) Show more diff context when reviewing changes during deploy:</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/kapp/docs/latest/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/config/</guid>
      <description>Overview ¶kapp supports custom Config resource to specify its own configuration. It&amp;rsquo;s expected to be included with your other Kubernetes configuration. Config resource is never applied to the cluster, though it follows general Kubernetes resource format. Multiple config resources are allowed.
kapp comes with built-in configuration (see it via kapp deploy-config) that includes rules for common resources.
Format ¶apiVersion:kapp.k14s.io/v1alpha1kind:ConfigminimumRequiredVersion:0.23.0rebaseRules:- path:[spec, clusterIP]type:copysources:[new, existing]resourceMatchers:- apiVersionKindMatcher:{apiVersion: v1, kind:Service}ownershipLabelRules:- path:[metadata, labels]resourceMatchers:- allMatcher:{}labelScopingRules:- path:[spec, selector]resourceMatchers:- apiVersionKindMatcher:{apiVersion: v1, kind:Service}templateRules:- resourceMatchers:- apiVersionKindMatcher:{apiVersion: v1, kind:ConfigMap}affectedResources:objectReferences:- path:[spec, template, spec, containers, {allIndexes: true}, env, {allIndexes: true}, valueFrom, configMapKeyRef]resourceMatchers:- apiVersionKindMatcher:{apiVersion: apps/v1, kind:Deployment}- path:[spec, template, spec, containers, {allIndexes: true}, envFrom, {allIndexes: true}, configMapRef]resourceMatchers:- apiVersionKindMatcher:{apiVersion: apps/v1, kind:Deployment}additionalLabels:department:marketingcost-center:mar201diffAgainstLastAppliedFieldExclusionRules:- path:[metadata, annotations, &amp;#34;deployment.</description>
    </item>
    
    <item>
      <title>Dangerous Flags</title>
      <link>/kapp/docs/latest/dangerous-flags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/dangerous-flags/</guid>
      <description>Overview ¶There are several flags in kapp deploy/delete/etc. commands that might be helpful in rare cases, but can cause problems if used improperly. These are their stories:
--dangerous-allow-empty-list-of-resources ¶This flag allows kapp deploy to accept empty set of new resources. Given that kapp deploy converges set of resources, when empty set is provided, kapp will delete all existing resources.
This commonly happens unintentionally. When configuration is piped into kapp (e.g. ytt -f config/ | kapp deploy -f- .</description>
    </item>
    
    <item>
      <title>Diff stage</title>
      <link>/kapp/docs/latest/diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/diff/</guid>
      <description>Overview ¶kapp compares resources specified in files against resources that exist in Kubernetes API. Once change set is calculated, it provides an option to apply it (see Apply section for further details).
There are four different types of operations: create, update, delete, noop (shown as empty). Seen in Op column of diff summary table. Additionally there is Op strategy column (shorted as Op st.), added in v0.31.0+, that shows supplemental information how operation will be performed (for example fallback on replace for update operation).</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>/kapp/docs/latest/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/faq/</guid>
      <description>Migrating from kubectl apply to kapp ¶Switching from kubectl apply to kapp deploy will allow kapp to adopt resources mentioned in a given config. However, kapp will try to insert a few of its labels in bodies of some resources, like Deployments, which may fail due to those resources having immutable fields that kapp tries to update (spec.selector on Deployments).
To prevent this failure, add the kapp.k14s.io/disable-default-label-scoping-rules: &amp;quot;&amp;quot; annotation as a kapp configuration to prevent kapp from touching the immutable fields when adopting a resource.</description>
    </item>
    
    <item>
      <title>GitOps</title>
      <link>/kapp/docs/latest/gitops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/gitops/</guid>
      <description>Using kapp with GitOps workflow ¶kapp provides a set of commands to make GitOps workflow very easy. Assuming that you have a CI environment or some other place where kapp can run based on a trigger (e.g. for every Git repo change) or continiously (e.g. every 5 mins), you can use following command:
$ ls my-repo . .. app1/ app2/ app3/ $ kapp app-group deploy -g my-env --directory my-repo Above command will deploy an application for each subdirectory in my-repo directory (in this case app1, app2 and app3).</description>
    </item>
    
    <item>
      <title>Integrating with Other Tools</title>
      <link>/kapp/docs/latest/integrating-with-other-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/integrating-with-other-tools/</guid>
      <description>Note: This is a non-exhaustive list of integrations
ytt and kbld ¶We recommend to use kapp with ytt and kbld to cover your configuration templating and image building needs. Typical workflow may look like this:
ytt -f config/ | kbld -f - | kapp deploy -a app1 -f- -c -y Helm ¶If you want to take advantage of both Helm templating and kapp deployment mechanisms, you can use helm template command to build configuration, and have kapp apply to the cluster:</description>
    </item>
    
    <item>
      <title>Namespace for State Storage</title>
      <link>/kapp/docs/latest/state-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/state-namespace/</guid>
      <description>Overview ¶To show list of deployed applications (via kapp ls), kapp manages metadata ConfigMap for each saved application. Each metadata ConfigMap contains generated label used to label all application resources. Additionally kapp creates ConfigMap per each deploy to record deployment history (seen via kapp app-change list -a app1).
-n (--namespace) flag allows to control which namespace is used for finding and storing metadata ConfigMaps. If namespace is not explicitly specified your current namespace is selected from kube config (typically ~/.</description>
    </item>
    
    <item>
      <title>Permissions</title>
      <link>/kapp/docs/latest/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/rbac/</guid>
      <description>Running kapp under restricted permissions ¶In a multi-tenant Kubernetes cluster, user&amp;rsquo;s actions may be limited to one or more namespaces via Role and RoleBinding configuration.
Following setup is currently expected by kapp (v0.10.0+):
 [required] kapp requires list/get/create/update/delete for v1/ConfigMap in state namespace so that it can store record of application and deployment history. [optional] kapp requires one ClusterRole rule: listing of namespaces. This requirement is necessary for kapp to find all namespaces so that it can search in each namespace resources that belong to a particular app (via a label).</description>
    </item>
    
    <item>
      <title>Resource Merge Method</title>
      <link>/kapp/docs/latest/merge-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/merge-method/</guid>
      <description>Why not basic 3 way merge? ¶kapp explicitly decided to not do basic 3 way merge, and instead allow the user to specify how to resolve &amp;ldquo;conflicts&amp;rdquo;. Here is our thinking:
 you as an operator have a set of files (input files given to kapp via -f) which describe desired configuration cluster has resources that need to be converged to whatever input files specify, with one exception: in some cases, cluster is the source of truth for certain information (but not most) and should keep that state on resources (common examples: some annotation on Deployment, clusterIP on Service, etc.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/kapp/docs/latest/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/security/</guid>
      <description>Vulnerability Disclosure ¶If you believe you have found a security issue in kapp, please privately and responsibly disclose it by following the directions in our security policy.</description>
    </item>
    
  </channel>
</rss>

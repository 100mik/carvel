<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Carvel</title>
    <link>/</link>
    <description>Recent content in Home on Carvel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>High level walkthrough of the kapp deploy command</title>
      <link>/blog/kapp-boxes-and-lines-blog-post/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/kapp-boxes-and-lines-blog-post/</guid>
      <description>What is kapp? Kapp is a deployment CLI within the Carvel tool suite for Kubernetes that helps manage resources in bulk.
In this demo, Garrett Cheadle, a Carvel maintainer, covers a high level overview of the kapp deploy command, which is a fairly complete, common kapp workflow. The process can be separated in four stages: Setup, Change Calculations, Pre-apply Checks, and Apply.
  Stage 1: Setup ¶  The first step in this stage will be initiated by the user.</description>
    </item>
    
    <item>
      <title>Deploying Kubernetes Applications with ytt, kbld, and kapp</title>
      <link>/blog/deploying-apps-with-ytt-kbld-kapp/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/deploying-apps-with-ytt-kbld-kapp/</guid>
      <description>TL;DR: ytt, kbld, kapp tools when used together offer a powerful way to create, customize, iterate on, and deploy cloud native applications. These tools are designed to be used in various workflows such as local development, and production deployment. Each tool is designed to be single-purpose and composable, resulting in easier ways of integrating them into existing or new projects, and with other tools.
 In this blog post we will focus on local application development workflow; however, tools introduced here work also well for other workflows, for example, for production GitOps deployments or manual application deploys.</description>
    </item>
    
    <item>
      <title>Carvel, formerly k14s, aims to simplify application deployment atop Kubernetes</title>
      <link>/blog/introduction-to-carvel-blog-post/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/introduction-to-carvel-blog-post/</guid>
      <description>Now that you&amp;rsquo;ve deployed Kubernetes, how do you get apps up and running atop the container runtime? Carvel (formerly known as k14s), a collection of open-source tools for working with Kubernetes, is designed to answer this question.
Carvel was born from frustration with existing tools ¶Carvel is a set of tools designed to ease lifecycle management of your Kubernetes workloads. The origin of Carvel begins with Dmitriy Kalinin and Nima Kaviani not being satisfied with existing tools to deploy Kubernetes workloads.</description>
    </item>
    
    <item>
      <title></title>
      <link>/kapp-controller/docs/latest/install-alpha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/install-alpha/</guid>
      <description>Install alpha release of kapp-controller ¶The alpha release of kapp-controller contains the packaging APIs, which are undergoing active development. The alpha release should only be used for experimenting with the packaging APIs as there will be possible breaking changes as further feedback is collected.
To install with kapp:
$ kapp deploy -a kc -f https://raw.githubusercontent.com/vmware-tanzu/carvel-kapp-controller/dev-packaging/alpha-releases/v0.18.0-alpha.5.yml To install with kubectl:
$ kubectl apply -f https://raw.githubusercontent.com/vmware-tanzu/carvel-kapp-controller/dev-packaging/alpha-releases/v0.18.0-alpha.5.yml </description>
    </item>
    
    <item>
      <title></title>
      <link>/kapp/docs/latest/hpa-deployment-rebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/hpa-deployment-rebase/</guid>
      <description>HPA and Deployment rebase ¶Here is an example on how to use custom rebaseRules to &amp;ldquo;prefer&amp;rdquo; server chosen value for spec.replicas field for a particular Deployment.
apiVersion:kapp.k14s.io/v1alpha1kind:ConfigrebaseRules:- path:[spec, replicas]type:copysources:[existing, new]resourceMatchers:- kindNamespaceNameMatcher:kind:Deploymentnamespace:my-nsname:my-app---apiVersion:autoscaling/v1kind:HorizontalPodAutoscalermetadata:name:my-appnamespace:my-ns.</description>
    </item>
    
    <item>
      <title></title>
      <link>/kapp/docs/latest/rebase-pvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/rebase-pvc/</guid>
      <description>PersistentVolumeClaim rebase ¶Here is an example on how to use custom rebaseRules to &amp;ldquo;prefer&amp;rdquo; server chosen value for several annotations added by PVC controller (in other words, cluster owned fields), instead of removing them based on given configuration.
Let&amp;rsquo;s deploy via kapp deploy -a test -f config.yml -c with following configuration config.yml:
apiVersion:v1kind:PersistentVolumeClaimmetadata:name:mysqlclaimspec:accessModes:- ReadWriteOnceresources:requests:storage:5GiWithout additional rebase rules following diff will be presented upon next deploy, stating that several annotations will be removed (since they were not present in the initial configuration):</description>
    </item>
    
    <item>
      <title>Air-gapped Workflow</title>
      <link>/imgpkg/docs/latest/air-gapped-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/imgpkg/docs/latest/air-gapped-workflow/</guid>
      <description>Scenario ¶You want to ensure Kubernetes application does not rely on images from external registries when deployed.
This scenario also applies when trying to ensure that all images are consolidated into a single registry, even if that registry is not air-gapped.
Prerequisites ¶To complete this workflow you will need access to an OCI registry like Docker Hub, and optionally, a Kubernetes cluster. (If you would like to use a local registry and Kubernetes cluster, try using Kind)</description>
    </item>
    
    <item>
      <title>Annotations</title>
      <link>/ytt/docs/latest/lang-ref-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-annotation/</guid>
      <description>Format ¶@ann1-name [ann-arg1, ann-arg2, ..., keyword-ann-arg1=val1]   content between brackets is optional.
  annotation names are typically namespaced, for example, overlay/merge is an annotation within an overlay namespace. Annotation namespaces are there for general organization, they are not associated with loaded packages (from load keyword).
  annotation arguments (positional and keyword) is just plain code
  Shared templating annotations ¶ @template/code [code] or just @ [code] (on its own line) represents plain code line  #@ a = calculate(100)key:value @template/value [code] or just @ [code] (at the end of line) represents a value associated structure  key:#@ valuearray:- #@ valueYAML templating annotations ¶  @yaml/map-key-override (no args)</description>
    </item>
    
    <item>
      <title>App Config</title>
      <link>/kapp-controller/docs/latest/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/config/</guid>
      <description>Example ¶See App Spec for details.
apiVersion:kappctrl.k14s.io/v1alpha1kind:Appmetadata:name:simple-appspec:serviceAccountName:defaultfetch:- git:url:https://github.com/k14s/k8s-simple-app-exampleref:origin/developsubPath:config-step-2-templatetemplate:- ytt:{}deploy:- kapp:{}spec.fetch ¶Fetches set of files from various sources. Multiple sources can be used (for example, helmChart and inline).
 inline: specify one or more files within resource imgpkgBundle: download imgpkg bundle from registry (available in v0.17.0+) image: download Docker image from registry http: download file at URL git: clone Git repository helmChart: fetch Helm chart from Helm repository  Pull helm chart via helm fetch</description>
    </item>
    
    <item>
      <title>App spec</title>
      <link>/kapp-controller/docs/latest/app-spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/app-spec/</guid>
      <description>apiVersion:kappctrl.k14s.io/v1alpha1kind:Appmetadata:name:simple-app# namespace is going to be used as a default namespace during kapp deploynamespace:nsspec:# pauses _future_ reconcilation; does _not_ affect# currently running reconciliation (optional; default=false)paused:true# cancels current and future reconciliations (optional; default=false)canceled:true# Deletion requests for the App will result in the App CR being# deleted, but its associated resources will not be deleted # (optional; default=false; v0.18.0+)noopDelete:true# specifies that app should be deployed authenticated via# given service account, found in this namespace (optional; v0.</description>
    </item>
    
    <item>
      <title>Applications</title>
      <link>/kapp/docs/latest/apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/apps/</guid>
      <description>Overview ¶kapp considers a set of resources with the same label as an application. These resources could span any number of namespaces or could be cluster-wide (e.g. CRDs).
kapp has two methods of finding resources:
 via unique-to-Namespace application name (via -a my-name flag), or via user provided label (via -a label:my-label=val flag)  First approach is most common as kapp generates a unique label for each tracked application and associates that with an application name.</description>
    </item>
    
    <item>
      <title>Apply Ordering</title>
      <link>/kapp/docs/latest/apply-ordering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/apply-ordering/</guid>
      <description>Overview ¶kapp includes builtin rules to make sure certain changes are applied in particular order:
 Creates/updates  CRDs are created/updated before custom resources Namespaces are created/updated before namespaced resources Pod related resources (ServiceAccount, ConfigMap, Secret, etc.) are created/updated before other resources (v0.25.0+) RBAC related resources (Role, RoleBinding, etc.) are created/updated before other resources (v0.25.0+)   Deletions (below is order as of v0.29.0+)  Custom resources are deleted first CRDs are deleted next Rest of resoures are deleted    As of v0.</description>
    </item>
    
    <item>
      <title>Apply stage</title>
      <link>/kapp/docs/latest/apply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/apply/</guid>
      <description>Overview ¶Once change set is calculated (see Diff section for details), kapp asks for user confirmation (unless --yes flag is specified) to proceed with changes.
Changes are applied in particular order as described in Apply ordering.
All created resources are labeled with several labels:
 kapp.k14s.io/app to track which application &amp;ldquo;owns&amp;rdquo; resource kapp.k14s.io/identity to identify preferred API version used when creating resource kapp.k14s.io/association to track (best effort) parent-child relationships between resources  Every time application is deployed, new application change record is saved.</description>
    </item>
    
    <item>
      <title>Apply Waiting</title>
      <link>/kapp/docs/latest/apply-waiting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/apply-waiting/</guid>
      <description>Overview ¶kapp includes builtin rules on how to wait for the following resource types:
 any resource with metadata.deletionTimestamp: wait for resource to be fully removed any resource matching Config&amp;rsquo;s waitRules: see &amp;ldquo;Custom waiting behaviour&amp;rdquo; below apiextensions.k8s.io/&amp;lt;any&amp;gt;/CustomResourceDefinition: wait for Established and NamesAccepted conditions to be True (note that this is wait rule for CustomResourceDefinition resource itself, not CRs) apps/v1/DaemonSet: wait for status.numberUnavailable to be 0 apps/v1/Deployment: see &amp;ldquo;apps/v1/Deployment resource&amp;rdquo; below apps/v1/ReplicaSet: wait for status.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/imgpkg/docs/latest/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/imgpkg/docs/latest/auth/</guid>
      <description>Via Docker config ¶Even though imgpkg commands use registry APIs directly, by default it uses credentials stored in ~/.docker/config.json which are typically generated via a docker login command.
Example generated ~/.docker/config.json:
{ &amp;#34;auths&amp;#34;: { &amp;#34;https://index.docker.io/v1/&amp;#34;: { &amp;#34;auth&amp;#34;: &amp;#34;dXNlcjpwYXNzd29yZA==&amp;#34; }, }, &amp;#34;HttpHeaders&amp;#34;: { &amp;#34;User-Agent&amp;#34;: &amp;#34;Docker-Client/18.09.6 (darwin)&amp;#34; } } where dXNlcjpwYXNzd29yZA== is base64(&amp;quot;username:password&amp;quot;).
Via Command Flags ¶You can explicitly specify credentials via command flags or associated environment variables. See imgpkg push -h for further details.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/kbld/docs/latest/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/auth/</guid>
      <description>Via Docker config ¶Even though kbld commands use registry APIs directly, by default it uses credentials stored in ~/.docker/config.json which are typically generated via docker login command.
Example generated ~/.docker/config.json:
{ &amp;#34;auths&amp;#34;: { &amp;#34;https://index.docker.io/v1/&amp;#34;: { &amp;#34;auth&amp;#34;: &amp;#34;dXNlcjpwYXNzd29yZA==&amp;#34; }, }, &amp;#34;HttpHeaders&amp;#34;: { &amp;#34;User-Agent&amp;#34;: &amp;#34;Docker-Client/18.09.6 (darwin)&amp;#34; } } where dXNlcjpwYXNzd29yZA== is base64(&amp;quot;username:password&amp;quot;).
Via Environment Variables ¶As of v0.23.0+, kbld can also use following environment variables:
 KBLD_REGISTRY_HOSTNAME to specify registry hostname (e.g. gcr.</description>
    </item>
    
    <item>
      <title>Basic Workflow</title>
      <link>/imgpkg/docs/latest/basic-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/imgpkg/docs/latest/basic-workflow/</guid>
      <description>Scenario ¶You want to create an immutable artifact containing Kubernetes configuration and images used in that configuration. Later, you want to grab that artifact and deploy it to Kubernetes.
Prerequisites ¶To complete this workflow you will need access to an OCI registry like Docker Hub, and optionally, a Kubernetes cluster. (If you would like to use a local registry and Kubernetes cluster, try using Kind)
If you would like to deploy the results of this scenario to your Kubernetes cluster, you will additionally need kbld and kubectl.</description>
    </item>
    
    <item>
      <title>Building images</title>
      <link>/kbld/docs/latest/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/building/</guid>
      <description>Building images from source ¶kbld can be used to orchestrate build tools such as Docker and pack to build images from source and record resulting image reference in a YAML file. This is especially convenient during local development when working with one or more changing applications.
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:simple-app#! &amp;lt;-- unresolved image ref---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test2spec:selector:matchLabels:app:kbld-test2template:metadata:labels:app:kbld-test2spec:containers:- name:my-appimage:another-simple-app#! &amp;lt;-- unresolved image ref---apiVersion:kbld.k14s.io/v1alpha1kind:Configsources:- image:simple-apppath:src/simple-app- image:another-simple-apppath:src/another-simple-app(See Configuration for more details about Sources.)
Running above example via kbld -f file.</description>
    </item>
    
    <item>
      <title>Built-in ytt Library</title>
      <link>/ytt/docs/latest/lang-ref-ytt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-ytt/</guid>
      <description>General modules ¶struct ¶See @ytt:struct module docs.
assert ¶load(&amp;#34;@ytt:assert&amp;#34;, &amp;#34;assert&amp;#34;) assert.fail(&amp;#34;expected value foo, but was {}&amp;#34;.format(value)) # stops execution x = data.values.env.mysql_password or assert.fail(&amp;#34;missing env.mysql_password&amp;#34;) data ¶See ytt @data/values for more details
load(&amp;#34;@ytt:data&amp;#34;, &amp;#34;data&amp;#34;) data.values # struct that has input values # relative to current package data.list() # [&amp;#34;template.yml&amp;#34;, &amp;#34;data/data.txt&amp;#34;] data.read(&amp;#34;data/data.txt&amp;#34;) # &amp;#34;data-txt contents&amp;#34; # relative to library root (available in v0.27.1+) data.list(&amp;#34;/&amp;#34;) # list files  data.list(&amp;#34;/data/data.txt&amp;#34;) # read file regexp ¶load(&amp;#34;@ytt:regexp&amp;#34;, &amp;#34;regexp&amp;#34;) regexp.</description>
    </item>
    
    <item>
      <title>Cheatsheet</title>
      <link>/kapp/docs/latest/cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/cheatsheet/</guid>
      <description>List ¶kapp ls -A List all app in the cluster (across all namespaces)
Deploy ¶Deploy app named app1 with configuration from config/:
kapp deploy -a app1 -f config/ -c Deploy app named app1 with configuration piped in (see alternative that does not require --yes next):
ytt -f config/ | kapp deploy -a app1 -f- -c -y Deploy app named app1 with configuration generated inline and with confirmation dialog:
kapp deploy -a app1 -f &amp;lt;(ytt -f config/ ) Show more diff context when reviewing changes during deploy:</description>
    </item>
    
    <item>
      <title>CNAB Image Maps</title>
      <link>/kbld/docs/latest/cnab-image-relocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/cnab-image-relocation/</guid>
      <description>CNAB spec mentions Image Relocation as part of bundle runtime.
kbld supports applying relocation-mapping.json on top of YAML configuration via kbld --image-map-file /cnab/app/relocation-mapping.json .... For example:
/cnab/app/relocation-mapping.json:
{ &amp;#34;gabrtv/microservice@sha256:cca460afa270d4c527981ef9ca4989346c56cf9b20217dcea37df1ece8120687&amp;#34;: &amp;#34;my.registry/microservice@sha256:cca460afa270d4c527981ef9ca4989346c56cf9b20217dcea37df1ece8120687&amp;#34;, &amp;#34;technosophos/helloworld:0.1.0&amp;#34;: &amp;#34;my.registry/helloworld:0.1.0&amp;#34; } and kbld input:
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:gabrtv/microservice@sha256:cca460afa270d4c527981ef9ca4989346c56cf9b20217dcea37df1ece8120687- name:my-app2image:technosophos/helloworld:0.1.0would result in:
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:my.registry/microservice@sha256:cca460afa270d4c527981ef9ca4989346c56cf9b20217dcea37df1ece8120687- name:my-app2image:my.</description>
    </item>
    
    <item>
      <title>Commands</title>
      <link>/imgpkg/docs/latest/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/imgpkg/docs/latest/commands/</guid>
      <description>Push ¶Overview ¶push command allows users to create a bundle in the registry from files and/or directories on their local file systems. For example,
$ imgpkg push -b index.docker.io/k8slt/sample-bundle -f my-bundle/ will push a bundle contents containing in the my-bundle/ directory to index.docker.io/k8slt/sample-bundle.
Use the -b/--bundle flag to specify the destination of the push. If the specified destination does not include a tag, the artifact will be pushed with the default tag :latest.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/kapp/docs/latest/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/config/</guid>
      <description>Overview ¶kapp supports custom Config resource to specify its own configuration. It&amp;rsquo;s expected to be included with your other Kubernetes configuration. Config resource is never applied to the cluster, though it follows general Kubernetes resource format. Multiple config resources are allowed.
kapp comes with built-in configuration (see it via kapp deploy-config) that includes rules for common resources.
Format ¶apiVersion:kapp.k14s.io/v1alpha1kind:ConfigminimumRequiredVersion:0.23.0rebaseRules:- path:[spec, clusterIP]type:copysources:[new, existing]resourceMatchers:- apiVersionKindMatcher:{apiVersion: v1, kind:Service}ownershipLabelRules:- path:[metadata, labels]resourceMatchers:- allMatcher:{}labelScopingRules:- path:[spec, selector]resourceMatchers:- apiVersionKindMatcher:{apiVersion: v1, kind:Service}templateRules:- resourceMatchers:- apiVersionKindMatcher:{apiVersion: v1, kind:ConfigMap}affectedResources:objectReferences:- path:[spec, template, spec, containers, {allIndexes: true}, env, {allIndexes: true}, valueFrom, configMapKeyRef]resourceMatchers:- apiVersionKindMatcher:{apiVersion: apps/v1, kind:Deployment}- path:[spec, template, spec, containers, {allIndexes: true}, envFrom, {allIndexes: true}, configMapRef]resourceMatchers:- apiVersionKindMatcher:{apiVersion: apps/v1, kind:Deployment}additionalLabels:department:marketingcost-center:mar201diffAgainstLastAppliedFieldExclusionRules:- path:[metadata, annotations, &amp;#34;deployment.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/kbld/docs/latest/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/config/</guid>
      <description>Overview ¶You can configure kbld by adding configuration resources (they follow Kubernetes resource format, but are removed from kbld output). Configuration resources may be specified multiple times.
Schema ¶---apiVersion:kbld.k14s.io/v1alpha1kind:ConfigminimumRequiredVersion:0.15.0sources:- image:adservicepath:src/destinations:- image:adservicenewImage:docker.io/dkalinin/microservices-demo-adservicesearchRules:- keyMatcher:name:sidecarImage- valueMatcher:image:exact-imageimageRepo:gcr.io/some/repooverrides:- image:nginxnewImage:docker.io/library/nginx:1.14.2 minimumRequiredVersion (optional) specify minimume required version of kbld needed to work with this configuration sources (optional; array) allows to specify how to build certain images. See details in sections below.  image (required; string) image matcher path (required; string) path to source location docker (optional; default) use Docker to build source.</description>
    </item>
    
    <item>
      <title>Configuring the Controller</title>
      <link>/kapp-controller/docs/latest/controller-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/controller-config/</guid>
      <description>(available in v0.14.0+)
Kapp controller exposes the ability to configure the controller via a config map which kapp controller will look for and apply as part of the startup processes
ConfigMap Spec ¶apiVersion:v1kind:ConfigMapmetadata:# Name must be `kapp-controller-config` for kapp controller to pick it upname:kapp-controller-config# Namespace must match the namespace kapp-controller is deployed tonamespace:kapp-controllerdata:# A cert chain of trusted ca certs. These will be added to the system-wide# cert pool of trusted ca&amp;#39;s (optional)caCerts:|-----BEGIN CERTIFICATE----- MIIEXTCCAsWgAwIBAgIQDqAvoGhrmyB/EvhjT/efWzANBgkqhkiG9w0BAQsFADA4 MQwwCgYDVQQGEwNVU0ExFjAUBgNVBAoTDUNsb3VkIEZvdW5kcnkxEDAOBgNVBAMT B2Jvc2gtY2EwHhcNMjAxMjIzMTY1OTAxWhcNMjExMjIzMTY1OTAxWjA4MQwwCgYD VQQGEwNVU0ExFjAUBgNVBAoTDUNsb3VkIEZvdW5kcnkxEDAOBgNVBAMTB2Jvc2gt Y2EwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCsMTj5yHLez8jzONu1 tv+u0dqzt8UdWCtUtHCDkIiNJIcB3PkGG7x/LvZ0bMydWeFcBq0g15tfG6N6vHnF 4p2E9nSe0XjEEnxEkmtdpoFVPZdHTBgc6H5LOMshPH1ARWpuvBnDb87oVinIZBaf 7BjhUQcRoGtsomk/R9Ke9FB4rMZUfuY/7CC8lDyP5Y02VeTAUimK6/WfDh3VPB3e vQfXKJY0Ba5s43fIdudV+fcuKDut01oKmiBL6IHLRSrZKta5mg4fgimst6nJ4xvU SWqYWS4yMxf6pOrTHPjbKUqXqbK4Reh+oQoE12WJZ3NvXr1GoDzt1xzTNzUpUVws nQm5Fo9H07mkjKeu8gOrOBQ2FqaK+eZ5FFNV7kToVQj2KVTEbLLcTrF454jhsoSd EOlqVUjtfxGz0dGEuy+IgMvSSjtky7eI08jdBWMiOThQvR3n0Q6TXF/wBwCEfgDa 4eVeziaUGPXUsefR2+2ZCQ6Z31SmtUGECciCKmKtZTekKCUCAwEAAaNjMGEwDgYD VR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFDwRpmIKYZvr lKqROus2Ae6gSKkDMB8GA1UdIwQYMBaAFDwRpmIKYZvrlKqROus2Ae6gSKkDMA0G CSqGSIb3DQEBCwUAA4IBgQA/LX15Qb7v/og06XB27TPl9StGBiewrb0WdHEz9H16 eN926TwxWKUr6QcbGg6UbNfLUfMC3VicCDMTQCSNhBTUXm+4pKcJsTyM9/Sk/e4U 5+l3FTgxXs+3mEoYJy16QlkU1XDr1q6Myo9Kc38d1yUW9OPxBV4Ur3+12uk5ElSC jZu7l+ox2FLds1TmYBhRR/2Jdbm5aoamh4FVpkmDgGedjERREymvnOIMkhWyUfWE L8Sxa2d8427cBieiEP4foLgjWKr2+diCDrBymU/pz/ZMRRpvUc2uFV005/vmDedK xQACQ8ZWBYWzNCV4C0Y5AS1PETxbocZ09Yw6K1XyVveEp8aQ/ROMkAUOObhMD45W GZNwewGU/V7kclDgMwq6R1VXr5R7NtK9V96vi6ZaujoJKvF1PFpZ/IHWcfFkpVoy Fu8L5PIkg4weBW+87kp+CCseEXPUplpqQCAnmVJdvilK6vgKc7T+vzbET8LNw7NX mHOVA3CR2w+yUhN4uiCI1aY= -----END CERTIFICATE-----# The url/ip of a proxy for kapp controller to use when making network# requests (optional)httpProxy:proxy-svc.</description>
    </item>
    
    <item>
      <title>Contributor Covenant Code of Conduct</title>
      <link>/shared/docs/latest/code-of-conduct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shared/docs/latest/code-of-conduct/</guid>
      <description>Our Pledge ¶In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in this project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.
Our Standards ¶Examples of behavior that contributes to creating a positive environment include:</description>
    </item>
    
    <item>
      <title>Dangerous Flags</title>
      <link>/kapp-controller/docs/latest/dangerous-flags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/dangerous-flags/</guid>
      <description>There are several flags available for kapp-controller binary that are strongly discouraged in a production setting.
--dangerous-enable-pprof=true ¶This flag enables Go&amp;rsquo;s pprof server within kapp-controller process. It runs on 0.0.0.0:6060. It allows to inspect running Go process in various ways, for example:
 list goroutines: http://x.x.x.x/debug/pprof/goroutine?debug=2 collect CPU samples: go tool pprof x.x.x.x/debug/pprof/profile?seconds=60 (useful commands: top10, tree)  </description>
    </item>
    
    <item>
      <title>Dangerous Flags</title>
      <link>/kapp/docs/latest/dangerous-flags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/dangerous-flags/</guid>
      <description>Overview ¶There are several flags in kapp deploy/delete/etc. commands that might be helpful in rare cases, but can cause problems if used improperly. These are their stories:
--dangerous-allow-empty-list-of-resources ¶This flag allows kapp deploy to accept empty set of new resources. Given that kapp deploy converges set of resources, when empty set is provided, kapp will delete all existing resources.
This commonly happens unintentionally. When configuration is piped into kapp (e.g. ytt -f config/ | kapp deploy -f- .</description>
    </item>
    
    <item>
      <title>Data Values vs Overlays</title>
      <link>/ytt/docs/latest/data-values-vs-overlays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/data-values-vs-overlays/</guid>
      <description>Overview ¶As folks get started with ytt, a common question that arises is, “when should I use data values versus overlays?” While these features do address a similar problem space, we recommend using one feature versus the other depending on the use case. We will detail our guidance below.
Data Values ¶Data values provide a way to inject input data into a template. If you think about a ytt template as a function, then data values are the varying parameters.</description>
    </item>
    
    <item>
      <title>Development &amp; Deploy</title>
      <link>/kapp-controller/docs/latest/dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/dev/</guid>
      <description>Install ytt, kbld, kapp beforehand (https://carvel.dev).
./hack/build.sh # to build locally # add `-v image_repo=docker.io/username/kapp-controller` with your registry to ytt invocation inside ./hack/deploy.sh # to deploy export KAPPCTRL_E2E_NAMESPACE=kappctrl-test ./hack/test-all.sh Release ¶# Bump version in cmd/controller/main.go # Commit ./hack/build-release.sh </description>
    </item>
    
    <item>
      <title>Dictionaries</title>
      <link>/ytt/docs/latest/lang-ref-dict/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-dict/</guid>
      <description>#@ color = {&amp;#34;red&amp;#34;: 123, &amp;#34;yellow&amp;#34;: 100, &amp;#34;blue&amp;#34;: &amp;#34;245&amp;#34;}red:#@ color[&amp;#34;red&amp;#34;]Copied here for convenience from Starlark specification.
 dict·clear (D.clear())  x = {&amp;#34;one&amp;#34;: 1, &amp;#34;two&amp;#34;: 2} x.clear() # None print(x) # {}  dict·get (D.get(key[, default]))  x = {&amp;#34;one&amp;#34;: 1, &amp;#34;two&amp;#34;: 2} x.get(&amp;#34;one&amp;#34;) # 1 x.get(&amp;#34;three&amp;#34;) # None x.get(&amp;#34;three&amp;#34;, 0) # 0  dict·items (D.items())  x = {&amp;#34;one&amp;#34;: 1, &amp;#34;two&amp;#34;: 2} x.items() # [(&amp;#34;one&amp;#34;, 1), (&amp;#34;two&amp;#34;, 2)]  dict·keys (D.</description>
    </item>
    
    <item>
      <title>Diff stage</title>
      <link>/kapp/docs/latest/diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/diff/</guid>
      <description>Overview ¶kapp compares resources specified in files against resources that exist in Kubernetes API. Once change set is calculated, it provides an option to apply it (see Apply section for further details).
There are four different types of operations: create, update, delete, noop (shown as empty). Seen in Op column of diff summary table. Additionally there is Op strategy column (shorted as Op st.), added in v0.31.0+, that shows supplemental information how operation will be performed (for example fallback on replace for update operation).</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>/kapp/docs/latest/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/faq/</guid>
      <description>Migrating from kubectl apply to kapp ¶Switching from kubectl apply to kapp deploy will allow kapp to adopt resources mentioned in a given config. However, kapp will try to insert a few of its labels in bodies of some resources, like Deployments, which may fail due to those resources having immutable fields that kapp tries to update (spec.selector on Deployments).
To prevent this failure, add the kapp.k14s.io/disable-default-label-scoping-rules: &amp;quot;&amp;quot; annotation as a kapp configuration to prevent kapp from touching the immutable fields when adopting a resource.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>/ytt/docs/latest/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/faq/</guid>
      <description>How do I template some text? ¶Here is an example describing some ways text templating can be done.
Data Values ¶Data values doc
Is it possible to add a new key to my values via the --data-value command line argument? ¶No. As with all data values, those passed through --data-value must be overrides, not new values. Instead, overlays are the intended way to provide new keys. See the data values vs overlays doc for more information.</description>
    </item>
    
    <item>
      <title>File Marks</title>
      <link>/ytt/docs/latest/file-marks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/file-marks/</guid>
      <description>Overview ¶ytt allows to control certain metadata about files via --file-mark flag.
$ ytt ... --file-mark &amp;lt;path&amp;gt;:&amp;lt;mark&amp;gt;=&amp;lt;value&amp;gt; where:
 path — location to the file(s) being marked  exact path (use --files-inspect to see paths as seen by ytt) path with * to match files in a directory path with **/* to match files and directories recursively   mark — metadata to modify on the file(s) selected by path value — the value for the mark  Note that this flag can be specified multiple times.</description>
    </item>
    
    <item>
      <title>For loop</title>
      <link>/ytt/docs/latest/lang-ref-for/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-for/</guid>
      <description>Refer to Starlark for loop specification for details.
 iterating with values  array:#@ for i in range(0,3):- #@ i- #@ i+1#@ end iterating with index  array:#@ arr = [1,5,{&amp;#34;key&amp;#34;:&amp;#34;val&amp;#34;}]#@ for i in range(len(arr)):- val:#@ arr[i]index:#@ i#@ end  use of continue/break  array:#@ for i in range(0,3):#@ if i == 1:#@ continue#@ end- #@ i- #@ i+1#@ end</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>/ytt/docs/latest/lang-ref-def/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-def/</guid>
      <description>Refer to Starlark function specification for details about various types of function arguments. Note that ytt&amp;rsquo;s Starlark use requires functions to be closed with an end.
 function definition within YAML  Labels returns map with two keys: test1, and test2:
#@ def my_labels():test1:123test2:124#@ endAbove is almost equivalent to (differnce is that return type in one case is a YAML fragment and in another it&amp;rsquo;s a dict):
#@ def my_labels():#@ return {&amp;#34;test1&amp;#34;: 123, &amp;#34;test2&amp;#34;: 124}#@ end function definition within Starlark (.</description>
    </item>
    
    <item>
      <title>Github Release</title>
      <link>/vendir/docs/latest/github-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/vendir/docs/latest/github-release/</guid>
      <description>vendir supports downloading software stored as a Github release. See vendir.yml spec for how to configure.
Github API Rate Limiting ¶If your public IP address is shared by multiple machines (e.g. workstations in an office), you may run into Github rate limiting errors. vendir as of v0.8.0 supports providing &amp;ldquo;Personal access token&amp;rdquo; to increase Github API rate limits. You can specify it via an environment variable:
$ export VENDIR_GITHUB_API_TOKEN=8c0a3... $ vendir sync To obtain personal access token go to Github.</description>
    </item>
    
    <item>
      <title>GitOps</title>
      <link>/kapp/docs/latest/gitops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/gitops/</guid>
      <description>Using kapp with GitOps workflow ¶kapp provides a set of commands to make GitOps workflow very easy. Assuming that you have a CI environment or some other place where kapp can run based on a trigger (e.g. for every Git repo change) or continiously (e.g. every 5 mins), you can use following command:
$ ls my-repo . .. app1/ app2/ app3/ $ kapp app-group deploy -g my-env --directory my-repo Above command will deploy an application for each subdirectory in my-repo directory (in this case app1, app2 and app3).</description>
    </item>
    
    <item>
      <title>How to Contribute</title>
      <link>/shared/docs/latest/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shared/docs/latest/contributing/</guid>
      <description>We&amp;rsquo;d love to accept your patches and contributions to this project. Please review the following guidelines you&amp;rsquo;ll need to follow in order to make a contribution.
Communication ¶We prefer communicating asynchronously through GitHub issues and the #carvel Slack channel. In order to be inclusive to the community, if a conversation related to an issue happens outside of these channels, we appreciate summarizing the conversation&amp;rsquo;s context and adding it to an issue.</description>
    </item>
    
    <item>
      <title>If Statements</title>
      <link>/ytt/docs/latest/lang-ref-if/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-if/</guid>
      <description>Refer to Starlark if statement specification for details.
 if  #@ if True:test1:123test2:124#@ end if (negative)  #@ if not True:test1:123#@ end single-node if  #@ if/end True:test1:123 if-else conditional  #@ if True:test1:123#@ else:test2:124#@ end if-elif-else conditional  #@ if True:test2:123#@ elif False:test2:124#@ else:test2:125#@ end single line if  #@ passwd = &amp;#34;...&amp;#34;test1:#@ passwd if passwd else assert.fail(&amp;#34;password must be set&amp;#34;) implicit if  #@ passwd = &amp;#34;...&amp;#34;test1:#@ passwd or assert.</description>
    </item>
    
    <item>
      <title>Injecting Secrets</title>
      <link>/ytt/docs/latest/injecting-secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/injecting-secrets/</guid>
      <description>Overview ¶This document is work in progress.
Unlike most configuration, many organizations disallow storing of plain secret values next to other code/configuration.
This document:
 presents several common approaches used to make secrets available to your templates does not cover injection of secrets directly into an application at runtime (overall may be the best approach) does not recommend one approach over another (though it does state pros and cons) does not talk about where resulting templates are forwarded  One common question that&amp;rsquo;s asked is why not to extend ytt to allow it to shell out to other programs or why not include builtin library that can fetch secrets from outside (e.</description>
    </item>
    
    <item>
      <title>Install</title>
      <link>/kapp-controller/docs/latest/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/install/</guid>
      <description>Grab the latest copy of YAML from the Releases page and use your favorite deployment tool (such as kapp or kubectl) to install it.
Example:
$ kapp deploy -a kc -f https://github.com/vmware-tanzu/carvel-kapp-controller/releases/latest/download/release.yml or
$ kubectl apply -f https://github.com/vmware-tanzu/carvel-kapp-controller/releases/latest/download/release.yml </description>
    </item>
    
    <item>
      <title>Integrating with Other Tools</title>
      <link>/kapp/docs/latest/integrating-with-other-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/integrating-with-other-tools/</guid>
      <description>Note: This is a non-exhaustive list of integrations
ytt and kbld ¶We recommend to use kapp with ytt and kbld to cover your configuration templating and image building needs. Typical workflow may look like this:
ytt -f config/ | kbld -f - | kapp deploy -a app1 -f- -c -y Helm ¶If you want to take advantage of both Helm templating and kapp deployment mechanisms, you can use helm template command to build configuration, and have kapp apply to the cluster:</description>
    </item>
    
    <item>
      <title>Kapp Controller Startup</title>
      <link>/kapp-controller/docs/latest/startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/startup/</guid>
      <description>(v0.14.0+)
The startup of kapp controller consists of two processes: controllerinit and controller.
The controllerinit Process ¶This is the main process for the kapp controller binary. Since the binary is the entrypoint for the docker image, kapp controller will be PID 1 and is therefore responsible for reaping any zombie processes, so the process begins by starting a thread to reap any zombies that appear. More on PID 1 and zombie processes can be found here.</description>
    </item>
    
    <item>
      <title>Known Limitations</title>
      <link>/ytt/docs/latest/known-limitations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/known-limitations/</guid>
      <description>All YAML comments are expected to be qualified (i.e. must start with #@  or #! ) by default. Current reason for this is ytt is trying to be cautious and disallow non-qualified comments (# ) since users may unintentionally write templating directives but forget to use @ after #. This default behaviour may change in future.
  YAML anchors and templating directive for the same YAML node are not supported.</description>
    </item>
    
    <item>
      <title>Language</title>
      <link>/ytt/docs/latest/lang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang/</guid>
      <description>Overview ¶Templating language used in ytt is a slightly modified version of Starlark. Following modifications were made:
 requires end keyword for block closing  hence no longer whitespace sensitive (except new line breaks)   does not allow use of pass keyword  See full Starlark specification for detailed reference.
Types ¶ NoneType: None (equivalent to null in other languages) Bool: True or False Integer: 1 Float: 1.1 String: &amp;quot;string&amp;quot; List: [1, 2, {&amp;quot;a&amp;quot;:3}] Tuple: (1, 2, &amp;quot;a&amp;quot;) Dictionary: {&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: &amp;quot;b&amp;quot;} Struct: struct.</description>
    </item>
    
    <item>
      <title>Library Module</title>
      <link>/ytt/docs/latest/lang-ref-ytt-library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-ytt-library/</guid>
      <description>Library annotations ¶Available in v0.28.0+
 #@library/ref: Attaches a yaml document to the specified library to be used during evalutaion via the library module (only supported for data value documents)  #@library/ref &amp;#34;@app&amp;#34;#@data/values---name:&amp;#34;app1&amp;#34;Note: data values may also be attached to libraries via command line flags
Library module ¶Library module @ytt:library provides a way to programmatically get result of templates included in a library. Libraries are found within _ytt_lib subdirectory.
 load(&amp;quot;@ytt:library&amp;quot;, &amp;quot;library&amp;quot;)  # build library instance app1 = library.</description>
    </item>
    
    <item>
      <title>Lists</title>
      <link>/ytt/docs/latest/lang-ref-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-list/</guid>
      <description>#@ nums = [123, 374, 490]first:#@ nums[0]Copied here for convenience from Starlark specification.
 list·append (L.append(x))  x = [] x.append(1) # None x.append(2) # None x.append(3) # None x # [1, 2, 3]  list·clear (L.clear())  x = [1, 2, 3] x.clear() # None x # []  list·extend (L.extend(x))  x = [] x.extend([1, 2, 3]) # None x.extend([&amp;#34;foo&amp;#34;]) # None x # [1, 2, 3, &amp;#34;foo&amp;#34;]  list·index (L.</description>
    </item>
    
    <item>
      <title>Load Statements</title>
      <link>/ytt/docs/latest/lang-ref-load/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-load/</guid>
      <description>Terminology ¶ module: single file; can export variables, functions, or be templated =&amp;gt; some type of result e.g. yaml structure, or string, or None) package: single directory; contains modules library: collection of packages  Usage ¶Load statement allows to load functions from other modules (such as ones from builtin ytt library).
 load  load(&amp;#34;@ytt:overlay&amp;#34;, &amp;#34;overlay&amp;#34;) # load overlay module from builtin ytt library load(&amp;#34;@ytt:overlay&amp;#34;, ov=&amp;#34;overlay&amp;#34;) # load overlay symbol under a different alias load(&amp;#34;helpers.</description>
    </item>
    
    <item>
      <title>Namespace for State Storage</title>
      <link>/kapp/docs/latest/state-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/state-namespace/</guid>
      <description>Overview ¶To show list of deployed applications (via kapp ls), kapp manages metadata ConfigMap for each saved application. Each metadata ConfigMap contains generated label used to label all application resources. Additionally kapp creates ConfigMap per each deploy to record deployment history (seen via kapp app-change list -a app1).
-n (--namespace) flag allows to control which namespace is used for finding and storing metadata ConfigMaps. If namespace is not explicitly specified your current namespace is selected from kube config (typically ~/.</description>
    </item>
    
    <item>
      <title>Outputs</title>
      <link>/ytt/docs/latest/outputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/outputs/</guid>
      <description>ytt supports three different output destinations:
 stdout, which is default  All YAML documents are combined into one document set. Non-YAML files are not printed anywhere.   output files, controlled via --output-files flag (v0.28.0+)  Output files will be added to given directory, preserving file names.  Example: ytt -f config.yml --output-files tmp/.     output directory, controlled via --dangerous-emptied-output-directory flag  Given directory will be emptied out beforehand and output files will be added preserving file names.</description>
    </item>
    
    <item>
      <title>Overlay module</title>
      <link>/ytt/docs/latest/lang-ref-ytt-overlay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-ytt-overlay/</guid>
      <description>Overview ¶ytt&amp;rsquo;s Overlay feature provides a way to combine YAML structures together with the help of annotations.
There are two (2) structures involved in an overlay operation:
 the &amp;ldquo;left&amp;rdquo; — the YAML document(s) (and/or contained maps and arrays) being modified, and the &amp;ldquo;right&amp;rdquo; — the YAML document (and/or contained maps and arrays) that is the overlay, describing the modification.  Each modification is composed of:
 a matcher (via an @overlay/(match) annotation), identifying which node(s) on the &amp;ldquo;left&amp;rdquo; are the target(s) of the edit, and an action (via an @overlay/(action) annotation), describing the edit.</description>
    </item>
    
    <item>
      <title>Overlays</title>
      <link>/ytt/docs/latest/ytt-overlays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/ytt-overlays/</guid>
      <description>What are they? ¶Sometimes it makes more sense to patch some YAML rather than template it.
For example, when:
 the file should not be edited directly (e.g. from a third party); the edit will apply to most or all documents; or the specific variable is less commonly configured.  Given a sample target YAML file:
 config.yml
---id:1contents:- apple---id:2contents:- pineapple &amp;hellip; this overlay &amp;hellip;
 add-content.yml
#@ load(&amp;#34;@ytt:overlay&amp;#34;, &amp;#34;overlay&amp;#34;)#@overlay/match by=overlay.</description>
    </item>
    
    <item>
      <title>Package Authoring</title>
      <link>/kapp-controller/docs/latest/package-authoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/package-authoring/</guid>
      <description>Available in v0.17.0-alpha.1+
Before jumping in, we recommend reading through the docs about the new packaging APIs to familiarize yourself with the YAML configuration used in these workflows.
This workflow walks through an example that will help a user transform a stack of plain Kubernetes manifests in to a Package within a PackageRepository. This will allow them to distribute their apps in a way that is easily installable by any consumers running a kapp-controller in their cluster.</description>
    </item>
    
    <item>
      <title>Package Consumption</title>
      <link>/kapp-controller/docs/latest/package-consumption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/package-consumption/</guid>
      <description>Available in v0.17.0-alpha.1+
Before jumping in, we recommend reading through the docs about the new packaging apis to familiarize yourself with the YAML configuration used in these workflows.
This workflow walks through the example contained in the packaging-demo.
Prerequisites ¶ You will need to install the alpha release on a Kubernetes cluster to go through the examples. The instructions below assume kapp and kubectl are installed.  Adding package repository ¶kapp-controller needs to know which packages are available to install.</description>
    </item>
    
    <item>
      <title>Packaging</title>
      <link>/kapp-controller/docs/latest/packaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/packaging/</guid>
      <description>Available in v0.17.0-alpha.1+
Disclaimer: These APIs are still very much in an alpha stage, so changes will almost certainly be made and no backwards compatibility is guaranteed between alpha versions.
The new alpha release of kapp-controller adds new APIs to bring common package management workflows to a Kubernetes cluster. This is done using three new CRs: PackageRepository, Package, and InstalledPackage, which are described further in their respective sections. As this is still an alpha feature, we would love any and all feedback regarding these APIs or any documentation relating to them!</description>
    </item>
    
    <item>
      <title>Packaging and Relocation</title>
      <link>/kbld/docs/latest/packaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/packaging/</guid>
      <description>Deprecation ¶This functionality was deprecated in kbld starting from version v0.30.0 and will be removed soon. These features are now available on imgpkg.
Overview ¶kbld provides a way to relocate (i.e. copy) images between multiple registries. Two approaches are available:
 kbld relocate (available v0.23.0+) allows to efficiently copy images between registries as long as running relocate command has connectivity to both registries. kbld package and kbld unpackage allows to export images into a single tarball, and later import them from given tarball into a different (or same) registry.</description>
    </item>
    
    <item>
      <title>Permissions</title>
      <link>/kapp/docs/latest/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/rbac/</guid>
      <description>Running kapp under restricted permissions ¶In a multi-tenant Kubernetes cluster, user&amp;rsquo;s actions may be limited to one or more namespaces via Role and RoleBinding configuration.
Following setup is currently expected by kapp (v0.10.0+):
 [required] kapp requires list/get/create/update/delete for v1/ConfigMap in state namespace so that it can store record of application and deployment history. [optional] kapp requires one ClusterRole rule: listing of namespaces. This requirement is necessary for kapp to find all namespaces so that it can search in each namespace resources that belong to a particular app (via a label).</description>
    </item>
    
    <item>
      <title>Resolving images</title>
      <link>/kbld/docs/latest/resolving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/resolving/</guid>
      <description>Resolving image references to digests ¶kbld looks for image keys within YAML documents and tries to resolve image reference to its full digest form.
For example, following
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:nginx:1.14.2#! ^-- image reference in its tag formwill be transformed to
---apiVersion:apps/v1kind:Deploymentmetadata:name:kbld-test1spec:selector:matchLabels:app:kbld-test1template:metadata:labels:app:kbld-test1spec:containers:- name:my-appimage:index.docker.io/library/nginx@sha256:f7988fb6c02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d#! ^-- resolved image reference to its digest formvia
kbld -f file.yml Few other variations
pbpaste | kbld -f- kbld -f . kbld -f file.yml -f config2.yml Generating resolution imgpkg lock output ¶Available in 0.</description>
    </item>
    
    <item>
      <title>Resource Merge Method</title>
      <link>/kapp/docs/latest/merge-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/merge-method/</guid>
      <description>Why not basic 3 way merge? ¶kapp explicitly decided to not do basic 3 way merge, and instead allow the user to specify how to resolve &amp;ldquo;conflicts&amp;rdquo;. Here is our thinking:
 you as an operator have a set of files (input files given to kapp via -f) which describe desired configuration cluster has resources that need to be converged to whatever input files specify, with one exception: in some cases, cluster is the source of truth for certain information (but not most) and should keep that state on resources (common examples: some annotation on Deployment, clusterIP on Service, etc.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>/imgpkg/docs/latest/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/imgpkg/docs/latest/resources/</guid>
      <description>Image ¶An OCI image is an artifact that lives within an OCI registry (such as DockerHub). It can contain an arbitrary number of files.
 Bundle ¶A bundle is an OCI image that holds 0+ arbitrary files and 0+ references to dependent OCI images (which may also be bundles). By tracking dependent images, imgpkg can copy bundles across registries.
Referenced images are stored within the .imgpkg directory at the root level of the bundle image.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/imgpkg/docs/latest/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/imgpkg/docs/latest/security/</guid>
      <description>Vulnerability Disclosure ¶If you believe you have found a security issue in imgpkg, please privately and responsibly disclose it by following the directions in our security policy.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/kapp-controller/docs/latest/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/security/</guid>
      <description>Vulnerability Disclosure ¶If you believe you have found a security issue in kapp-controller, please privately and responsibly disclose it by following the directions in our security policy.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/kapp/docs/latest/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp/docs/latest/security/</guid>
      <description>Vulnerability Disclosure ¶If you believe you have found a security issue in kapp, please privately and responsibly disclose it by following the directions in our security policy.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/kbld/docs/latest/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kbld/docs/latest/security/</guid>
      <description>Vulnerability Disclosure ¶If you believe you have found a security issue in kbld, please privately and responsibly disclose it by following the directions in our security policy.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/vendir/docs/latest/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/vendir/docs/latest/security/</guid>
      <description>Vulnerability Disclosure ¶If you believe you have found a security issue in vendir, please privately and responsibly disclose it by following the directions in our security policy.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/ytt/docs/latest/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/security/</guid>
      <description>Vulnerability Disclosure ¶If you believe you have found a security issue in ytt, please privately and responsibly disclose it by following the directions in our security policy.
Attack Vectors ¶This section is a work-in-progress&amp;hellip;
  malicious template input
 input tries to exhaust cpu/mem/disk resources  A: how does it affect go-yaml? &amp;hellip; https://en.wikipedia.org/wiki/Billion_laughs_attack   input tries to use YAML tagging to initialize custom objects (std yaml concern)  A: TBD      malicious template code</description>
    </item>
    
    <item>
      <title>Security Model</title>
      <link>/kapp-controller/docs/latest/security-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/security-model/</guid>
      <description>App CR privileges ¶kapp-controller container runs with a service account (named kapp-controller-sa inside kapp-controller namespace) that has access to all service accounts and secrets in the cluster. This service account is not used for deployment of app resources.
Each App CR must specify either a
 service account (via spec.serviceAccountName) or, Secret with kubeconfig contents for some cluster (via spec.cluster.kubeconfigSecretRef.name)  forcing App CR owner to explicitly provide needed privileges for management of app resources.</description>
    </item>
    
    <item>
      <title>Security Policy</title>
      <link>/shared/docs/latest/security-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shared/docs/latest/security-policy/</guid>
      <description>The VMware Security Response Centre Team provides a single point of contact for the reporting of security vulnerabilities in Carvel (part of VMware) products and coordinates the process of investigating any reported vulnerabilities.
Reporting a Vulnerability ¶We strongly encourage people to report security vulnerabilities privately to our security team before disclosing them in a public forum.
The e-mail address to use to contact the team is security@vmware.com.
Please note that the e-mail address above should only be used for reporting undisclosed security vulnerabilities in Carvel (part of VMware) products and managing the process of fixing such vulnerabilities.</description>
    </item>
    
    <item>
      <title>Sops</title>
      <link>/kapp-controller/docs/latest/sops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/sops/</guid>
      <description>Available in v0.11.0+.
Storing encrypted secrets next to your configuration (within a Git repo or other artifacts) is one way to manage secret lifecycle. kapp-controller integrates with Mozilla&amp;rsquo;s SOPS to decrypt secret material in fetched configuration.
Prepate GPG installation ¶$ gpg --gen-key ... $ gpg --list-secret-keys --keyid-format LONG /root/.gnupg/secring.gpg ------------------------ sec 4096R/B464DFD255C6B9F8 2020-10-03 uid test test (test) &amp;lt;test@test.com&amp;gt; ssb 4096R/FEE37B8E2098EDFC 2020-10-03 (Note: B464DFD255C6B9F8 is the ID to be used later)</description>
    </item>
    
    <item>
      <title>Strict YAML</title>
      <link>/ytt/docs/latest/strict/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/strict/</guid>
      <description>Overview ¶ytt includes strict YAML subset mode that tries to remove any kind of ambiguity in user&amp;rsquo;s intent when parsing YAML.
Unlike full YAML, strict subset:
 only supports specifying nulls as &amp;quot;&amp;quot; or null only supports specifying bools as false or true only support basic int and float declarations  prefix, suffix, octal notation, etc are not supported   requires strings with whitespace to be explicitly quoted requires strings with colon to be explicitly quoted requires strings with triple-dash (document start) to be explicitly quoted  Example ¶Non-strict:</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>/ytt/docs/latest/lang-ref-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-string/</guid>
      <description>name1:#@ name + &amp;#34;-deployment&amp;#34;name2:#@ &amp;#34;{}-deployment&amp;#34;.format(&amp;#34;name&amp;#34;)Copied here for convenience from Starlark specification.
 string·elem_ords string·capitalize (S.capitalize())  &amp;#34;hello, world!&amp;#34;.capitalize() # &amp;#34;Hello, world!&amp;#34;`  string·codepoint_ords string·count (S.count(sub[, start[, end]]))  &amp;#34;hello, world!&amp;#34;.count(&amp;#34;o&amp;#34;) # 2 &amp;#34;hello, world!&amp;#34;.count(&amp;#34;o&amp;#34;, 7, 12) # 1 (in &amp;#34;world&amp;#34;)  string·endswith (S.endswith(suffix[, start[, end]]))  &amp;#34;filename.star&amp;#34;.endswith(&amp;#34;.star&amp;#34;) # True &amp;#39;foo.cc&amp;#39;.endswith((&amp;#39;.cc&amp;#39;, &amp;#39;.h&amp;#39;)) # True  string·find (S.find(sub[, start[, end]]))  &amp;#34;bonbon&amp;#34;.find(&amp;#34;on&amp;#34;) # 1 &amp;#34;bonbon&amp;#34;.find(&amp;#34;on&amp;#34;, 2) # 4 &amp;#34;bonbon&amp;#34;.find(&amp;#34;on&amp;#34;, 2, 5) # -1  string·format (S.</description>
    </item>
    
    <item>
      <title>Struct module</title>
      <link>/ytt/docs/latest/lang-ref-ytt-struct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-ytt-struct/</guid>
      <description>Overview ¶The @ytt:struct module provides functions for constructing and deconstructing struct values.
To use these functions, include the @ytt:struct module:
load(&amp;#34;@ytt:struct&amp;#34;, &amp;#34;struct&amp;#34;)  struct.decode() ¶Deconstructs a given value into plain/Starlark values, recursively.
struct.decode(struct_val)  struct_val (struct) — the value to decompose.  struct values are converted into dict values where each attribute in the struct becomes a key on the dict. if the value of an attribute is a struct, it is likewise converted to a dict.</description>
    </item>
    
    <item>
      <title>Structs</title>
      <link>/ytt/docs/latest/lang-ref-structs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-structs/</guid>
      <description>Overview ¶Structs are well-defined data objects, comprised of key/value pairs known as &amp;ldquo;attributes&amp;rdquo;. They are a way to store and refer to data of a known structure.
The most commonly used struct is data.values, supplied by the @ytt:data module. For example, a data values defined by:
#@data/values---db_conn:host:acme.example.comis automatically processed into a struct (named values): the keys in the @data/values file are defined one-for-one as attributes on the struct.
Those attribues can be referenced by name:</description>
    </item>
    
    <item>
      <title>Sync command</title>
      <link>/vendir/docs/latest/sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/vendir/docs/latest/sync/</guid>
      <description>Overview ¶vendir sync command looks for vendir.yml file in current directory for its configuration. vendir.yml specifies source of files for each managed directory.
# Run to sync directory contents as specified by vendir.yml $ vendir sync See vendir.yml spec for its schema.
Sync with local changes override ¶As of v0.7.0 you can use --directory flag to override contents of particular directories by pointing them to local directories. When this flag is specified other directories will not be synced (hence lock config is not going to be updated).</description>
    </item>
    
    <item>
      <title>Template Module</title>
      <link>/ytt/docs/latest/lang-ref-ytt-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-ytt-template/</guid>
      <description>@template Functions ¶The @ytt:template module provides a function that can be used to update templates.
To use these functions, include the @ytt:template module:
#@ load(&amp;#34;@ytt:template&amp;#34;, &amp;#34;template&amp;#34;) The functions exported by this module are:
 template.replace()  template.replace() ¶Replaces the existing yaml node with the yaml node(s) provided or returned from a function call, of the same type. Underscore (_) is the conventional replacement key, though any key can be used.</description>
    </item>
    
    <item>
      <title>Text Templating</title>
      <link>/ytt/docs/latest/ytt-text-templating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/ytt-text-templating/</guid>
      <description>Overview ¶ytt supports text templating within YAML strings and .txt files.
Text templating is controlled via (@ and @) directives. These directives can be combined with following markers:
 = to output result; result must be of type string - to trim space either to the left (if next to opening directive) or right (if next to closing directive)  Examples:
 before (@ 123 @) middle (@= &amp;quot;tpl&amp;quot; @) after produces before middle tpl after before (@- 123 -@) middle (@-= &amp;quot;tpl&amp;quot; -@) after produces beforemiddletplafter  Inside YAML strings ¶+ operand or string·format(.</description>
    </item>
    
    <item>
      <title>vendir.lock.yml spec</title>
      <link>/vendir/docs/latest/vendir-lock-spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/vendir/docs/latest/vendir-lock-spec/</guid>
      <description>Lock file is generated by vendir sync and is placed next to related vendir.yml.
apiVersion:vendir.k14s.io/v1alpha1kind:LockConfigdirectories:- path:config/_ytt_libcontents:- path:github.com/cloudfoundry/cf-k8s-networking# present if this is managed manuallymanual:{}# present if gitgit:# resolved checked out commit SHAsha:2b009b61fa8afb330a4302c694ee61b11104c54c# resolved checked out commit titlecommitTitle: &amp;#39;feat:add /metrics prometheus scrapable endpoint...&amp;#39;# resolved to a set of tags pointing to sha (v0.11.0+)tags:- &amp;#34;4.0.0&amp;#34;# present if github releasegithubRelease:# resolved release urlurl:https://api.github.com/repos/pivotal/kpack/releases/22747441# present if helm chart (v0.11.0+)helmChart:appVersion:&amp;#34;5.0.7&amp;#34;version:&amp;#34;10.5.7&amp;#34;# present if httphttp:{}# present if image (v0.</description>
    </item>
    
    <item>
      <title>vendir.yml spec</title>
      <link>/vendir/docs/latest/vendir-spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/vendir/docs/latest/vendir-spec/</guid>
      <description>apiVersion:vendir.k14s.io/v1alpha1kind:Config# declaration of minimum required vendir binary version (optional)minimumRequiredVersion:0.8.0# one or more directories to manage with vendirdirectories:- # path is relative to vendir.yml locationpath:config/_ytt_libcontents:- # path lives relative to directory path # (required)path:github.com/cloudfoundry/cf-k8s-networking# uses git to clone repository (optional)git:# http or ssh urls are supported (required)url:https://github.com/cloudfoundry/cf-k8s-networking# branch, tag, commit; origin is the name of the remote (required)# optional if refSelection is specified (available in v0.11.0+)ref:origin/master# specifies a strategy to resolve to an explicit ref (optional; v0.</description>
    </item>
    
    <item>
      <title>Version module</title>
      <link>/ytt/docs/latest/lang-ref-ytt-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-ytt-version/</guid>
      <description>Available in v0.26.0+
Version module provides a way to assert on minimum ytt binary version in your configuration. It could be placed into a conditional or just at the top level within *.star, *.yml or any other template file.
Example configuration directory may look like this:
 config/  0-min-version.star: contents below deployment.yml other.yml    # filename starts with &amp;#39;0-&amp;#39; to make sure this file gets # processed first, consequently forcing version check run first load(&amp;#34;@ytt:version&amp;#34;, &amp;#34;version&amp;#34;) version.</description>
    </item>
    
    <item>
      <title>Versions</title>
      <link>/vendir/docs/latest/versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/vendir/docs/latest/versions/</guid>
      <description>Available in v0.12.0+.
Vendir uses version selection in following places:
 git source type for selection of ref based on Git tags   VersionSelection type ¶VersionSelection type may be used by other projects (such as kbld) for selection of versions in different contexts. All usage follows same spec:
# interpret versions according to semantic version spec.# see semver section below for further details (required)semver:# list of semver constraints (optional)constraints:&amp;#34;&amp;gt;0.4.0&amp;#34;# by default prerelease versions are not included (optional)prereleases:# select prerelease versions that include given identifiers (optional)identifiers:[beta, rc] Semver ¶github.</description>
    </item>
    
    <item>
      <title>Walkthrough</title>
      <link>/kapp-controller/docs/latest/walkthrough/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kapp-controller/docs/latest/walkthrough/</guid>
      <description>The goal of this walkthrough is to demonstrate how to install a simple example application, an HTTP server, on Kubernetes with kapp-controller. We will use examples/simple-app-git directory as our YAML configuration.
You can use kubectl (or another tool) to deploy the YAML examples below. We&amp;rsquo;ve chosen kapp.
  Start by installing kapp-controller onto your cluster
  Install examples/default-ns-rbac.yml. It creates default-ns-sa service account that allows to change any resource within the default namespace.</description>
    </item>
    
    <item>
      <title>Working directly with images</title>
      <link>/imgpkg/docs/latest/working-directly-with-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/imgpkg/docs/latest/working-directly-with-images/</guid>
      <description>In rare cases imgpkg&amp;rsquo;s bundle concept is not wanted (or necessary). imgpkg provides a --image flag for push, pull and copy commands. When the --image flag is used, there is no need for a .imgpkg directory to store metadata.
For most use cases, we suggest using the bundle concept and --bundle flag.</description>
    </item>
    
    <item>
      <title>YAMLFragments</title>
      <link>/ytt/docs/latest/lang-ref-yaml-fragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/lang-ref-yaml-fragment/</guid>
      <description>Overview ¶YAMLFragment is a type of value that is defined directly in YAML (instead of plain Starlark). For example, function val() returns a value of type yamlfragment.
#@ def vals():key1:val1key2:subkey:val2#@ endYAMLFragment may contain:
 YAML document set (array of YAML documents) YAML array YAML map null  Given various contents it wraps, YAMLFragment currently exposes limited ways of accessing its contents directly. Following accessors are available in v0.26.0+.
YAML Document Set ¶#@ def docs():---doc1---doc2---doc3#@ end access contents of a document at particular index  docs()[1] # returns &amp;#34;doc2&amp;#34;  loop over each document, setting val to its contents  for val in docs(): val # .</description>
    </item>
    
    <item>
      <title>ytt @data/values</title>
      <link>/ytt/docs/latest/ytt-data-values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/ytt-data-values/</guid>
      <description>Overview ¶The standard way to externalize configuration values is to declare them as &amp;ldquo;Data Values&amp;rdquo; and then reference those values in templates.
Declaring and Using Data Values ¶A Data Values file is a YAML document annotated with @data/values.
#@data/values---key1:val1key2:nested:val2key3:val3key4:ytt processes all Data Values files prior to rendering templates.
Templates can access those processed values via the @ytt:data module:
#@ load(&amp;#34;@ytt:data&amp;#34;, &amp;#34;data&amp;#34;)first:#@ data.values.key1second:#@ data.values.key2.nestedthird:#@ data.values.key3fourth:#@ data.values.key4Resulting in
first:val1second:val2third:val3fourth:nullNote:
 Data Values keys must be strings.</description>
    </item>
    
    <item>
      <title>ytt vs x</title>
      <link>/ytt/docs/latest/ytt-vs-x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/ytt/docs/latest/ytt-vs-x/</guid>
      <description>ytt vs Go text/template (and other text templating tools) ¶ Go&amp;rsquo;s text/template Jinja  Most generic templating tools do not understand content that they are templating and consider it just plain text. ytt operates on YAML structures, hence typical escaping and formatting problems common to text templating tools are eliminated. Additionally, ytt provides a very easy way to make structures reusable in a much more readable way that&amp;rsquo;s possible with some text templating tools.</description>
    </item>
    
  </channel>
</rss>
